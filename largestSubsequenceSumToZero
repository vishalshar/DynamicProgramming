
import java.util.HashMap;
import java.util.HashSet;

/**
 *
 
 Let A be the input array of integers with length n. Proceed as follows. 
 Declare a new array S of the same length where S[i] = \sum_{j=0}^{i} A[j] i.e., 
 the i'th entry of S contains the sum of the entries in A upto and including 
 index i. Now, if A[t] ... A[t+k] is a zero sum subsequence then S[t] = S[t+k]. 
 So, the problem reduces to finding two farthest entries in S which have the 
 same integer entries. This can be done easily using a hash map. Go through 
 the entries of S, hash S[i] and store i if S[i] was not seen before. Note that 
 when you see that S[i] was seen, you can compute the length of the current 
 zero sum sequence as i - index which is stored at S[i].
 
 * @author Vishal
 */
public class largestSumToZero {

    /**
     * @param args the command line arguments
     */
     
    public static void main(String[] args) {
        // TODO code application logic here
        int arr[] = {10,12,-10,-13,10,-10,11};
        largestSubarraySumToZero(arr);
    }
    
    private static void largestSubsequenceSumToZero(int[] arr) {
        int temp[]= new int[arr.length];
        
        for(int i=0;i<arr.length;i++)
        {
            temp[i]= sumArray(arr, i);
        }
        
        HashMap<Integer, Integer> checkValue = new HashMap<Integer,Integer>();
        
        int start=0,end=0,max=0;
        
        for(int i=0;i<temp.length;i++)
        {
           if(!checkValue.containsKey(temp[i])) 
           {
               checkValue.put(temp[i],i);
           }
           else
           {
               if(max < Math.abs(i-checkValue.get(temp[i])))
               {
                    max = Math.abs(i-checkValue.get(temp[i]));
                    start = checkValue.get(temp[i]);
                    end = i;
               }
           }
        }
        
        System.out.println((start+1)+" "+end);
    }
    private static int sumArray(int arr[],int index)
    {
        int sum = 0;
        for(int i=0;i<=index;i++)
        {
            sum+=arr[i];
        }
        return sum;
    }
}
